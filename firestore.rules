rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Профили пользователей
    match /profiles/{userId} {
      allow read: if true;
      allow create, update, delete: if request.auth != null && request.auth.uid == userId;
    }

    // Посты
    match /posts/{postId} {
      // Разрешаем чтение архивированных постов только учителям и админам, а также по прямой ссылке
      allow read: if resource.data.archived == true ?
                    (request.auth != null && get(/databases/$(database)/documents/profiles/$(request.auth.uid)).data.role in ["admin", "teacher"]) ||
                    request.path.size() == 2 // Разрешаем доступ по прямой ссылке (ID поста)
                  : true;

      allow create: if request.auth != null;
      // Разрешаем обновление только поля likesCount и viewsCount всем авторизованным пользователям
      allow update: if request.auth != null &&
                    (request.resource.data.diff(resource.data).affectedKeys().hasOnly(["likesCount", "viewsCount"]) ||
                     // Автор может обновлять свои посты, но не может изменять поле archived
                     (resource.data.author_id == request.auth.uid && !request.resource.data.diff(resource.data).affectedKeys().hasAny(["archived"])) ||
                     // Учитель или админ могут обновлять любые посты и менять поле archived
                     get(/databases/$(database)/documents/profiles/$(request.auth.uid)).data.role == "admin" ||
                     get(/databases/$(database)/documents/profiles/$(request.auth.uid)).data.role == "teacher");
      // Разрешаем удаление только автору, админу или учителю
      allow delete: if request.auth != null &&
                    (resource.data.author_id == request.auth.uid ||
                     get(/databases/$(database)/documents/profiles/$(request.auth.uid)).data.role == "admin" ||
                     get(/databases/$(database)/documents/profiles/$(request.auth.uid)).data.role == "teacher");
    }

    // Комментарии
    match /comments/{commentId} {
      allow read: if true;
      allow create: if request.auth != null;
      // Разрешаем обновление только поля likesCount всем авторизованным пользователям
      allow update: if request.auth != null &&
                    (request.resource.data.diff(resource.data).affectedKeys().hasOnly(["likesCount"]) ||
                     resource.data.author_id == request.auth.uid ||
                     get(/databases/$(database)/documents/profiles/$(request.auth.uid)).data.role == "admin" ||
                     get(/databases/$(database)/documents/profiles/$(request.auth.uid)).data.role == "teacher");
      // Разрешаем удаление только автору, админу или учителю
      allow delete: if request.auth != null &&
                    (resource.data.author_id == request.auth.uid ||
                     get(/databases/$(database)/documents/profiles/$(request.auth.uid)).data.role == "admin" ||
                     get(/databases/$(database)/documents/profiles/$(request.auth.uid)).data.role == "teacher");
    }

    // Лайки комментариев
    match /comment_likes/{likeId} {
      allow read: if true;
      allow create, delete: if request.auth != null;
    }

    // Лайки постов
    match /likes/{likeId} {
      allow read: if true;
      allow create, delete: if request.auth != null;
    }

    // Теги
    match /tags/{tagId} {
      allow read: if true;
      allow write: if request.auth != null;
    }

    // Связи постов с тегами
    match /post_tags/{docId} {
      allow read: if true;
      allow write: if request.auth != null;
    }

    // Просмотры
    match /views/{viewId} {
      allow read: if true;
      allow create: if request.auth != null;
    }

    // Избранное
    match /bookmarks/{bookmarkId} {
      allow read: if true;
      allow create, delete: if request.auth != null;
    }
  }
}
