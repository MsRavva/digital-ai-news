rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Функция для проверки роли пользователя
    function isAdmin() {
      return request.auth != null &&
             exists(/databases/$(database)/documents/profiles/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/profiles/$(request.auth.uid)).data.role == "admin";
    }

    function isTeacher() {
      return request.auth != null &&
             exists(/databases/$(database)/documents/profiles/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/profiles/$(request.auth.uid)).data.role == "teacher";
    }

    function isTeacherOrAdmin() {
      return isAdmin() || isTeacher();
    }

    function isAuthor(authorId) {
      return request.auth != null && request.auth.uid == authorId;
    }

    // Профили пользователей
    match /profiles/{userId} {
      allow read: if true;
      allow create, update, delete: if isAuthor(userId);
    }

    // Посты
    match /posts/{postId} {
      // Разрешаем чтение всех постов всем пользователям
      allow read: if true;

      // Разрешаем создание постов всем авторизованным пользователям
      allow create: if request.auth != null;

      // Разрешаем обновление постов
      allow update: if request.auth != null &&
                    // Все авторизованные пользователи могут обновлять счетчики
                    (request.resource.data.diff(resource.data).affectedKeys().hasOnly(["likesCount", "viewsCount"]) ||
                     // Автор может обновлять свои посты, но не может изменять поля archived и pinned
                     (isAuthor(resource.data.author_id) && !request.resource.data.diff(resource.data).affectedKeys().hasAny(["archived", "pinned"])) ||
                     // Учитель или админ могут обновлять любые посты и менять поля archived и pinned
                     isTeacherOrAdmin() ||
                     // Временно разрешаем обновление поля pinned для всех постов (для скрипта обновления)
                     request.resource.data.diff(resource.data).affectedKeys().hasOnly(["pinned"]));

      // Разрешаем удаление постов
      allow delete: if request.auth != null &&
                    // Автор может удалять свои посты
                    (isAuthor(resource.data.author_id) ||
                     // Учитель или админ могут удалять любые посты
                     isTeacherOrAdmin());
    }

    // Комментарии
    match /comments/{commentId} {
      allow read: if true;
      allow create: if request.auth != null;

      // Разрешаем обновление комментариев
      allow update: if request.auth != null &&
                    // Все авторизованные пользователи могут обновлять счетчик лайков
                    (request.resource.data.diff(resource.data).affectedKeys().hasOnly(["likesCount"]) ||
                     // Автор может обновлять свои комментарии
                     isAuthor(resource.data.author_id) ||
                     // Учитель или админ могут обновлять любые комментарии
                     isTeacherOrAdmin());

      // Разрешаем удаление комментариев
      allow delete: if request.auth != null &&
                    // Автор может удалять свои комментарии
                    (isAuthor(resource.data.author_id) ||
                     // Учитель или админ могут удалять любые комментарии
                     isTeacherOrAdmin());
    }

    // Лайки комментариев
    match /comment_likes/{likeId} {
      allow read: if true;
      allow create, delete: if request.auth != null;
    }

    // Лайки постов
    match /likes/{likeId} {
      allow read: if true;
      allow create, delete: if request.auth != null;
    }

    // Теги
    match /tags/{tagId} {
      allow read: if true;
      allow write: if request.auth != null;
    }

    // Связи постов с тегами
    match /post_tags/{docId} {
      allow read: if true;
      allow write: if request.auth != null;
    }

    // Просмотры
    match /views/{viewId} {
      allow read: if true;
      allow create: if request.auth != null;
    }

    // Избранное
    match /bookmarks/{bookmarkId} {
      allow read: if true;
      allow create, delete: if request.auth != null;
    }
  }
}
