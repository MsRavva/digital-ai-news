const admin = require('firebase-admin');
const serviceAccount = require('../serviceAccountKey.json');

// Инициализация Firebase Admin SDK
admin.initializeApp({
  credential: admin.credential.cert(serviceAccount)
});

const db = admin.firestore();

// ID пользователя "Василий Смирнов"
const authorId = '4J9Vf4tqKOU7vDcz99h6nBu0gHx2';

// Мокап-новости
const mockupNews = [
  {
    title: "DeepSeek R1: Новый стандарт AI-ассистентов для веб-разработчиков",
    content: "В первом квартале 2025 года компания DeepSeek представила свою революционную модель DeepSeek R1, которая уже успела зарекомендовать себя как лучший AI-ассистент для разработчиков. По результатам независимых тестов, DeepSeek R1 превосходит ChatGPT в задачах программирования, особенно при работе с JavaScript и TypeScript.\n\nМодель демонстрирует впечатляющие способности в генерации кода для React-приложений, оптимизации производительности и рефакторинге существующего кода. Особенно полезной оказалась функция глубокого мышления (deep reasoning), которая позволяет модели анализировать архитектурные решения и предлагать оптимальные подходы к разработке.\n\nКак веб-разработчик, я уже интегрировал DeepSeek R1 в свой рабочий процесс и могу с уверенностью сказать, что это значительно повысило мою продуктивность. Особенно впечатляет работа с TypeScript — модель не только генерирует типы, но и предлагает оптимальные решения для сложных типовых конструкций.",
    category: "news",
    tags: ["AI", "DeepSeek", "JavaScript", "TypeScript", "React"]
  },
  {
    title: "Технологический стек 2025: Что выбрать для веб-разработки",
    content: "В 2025 году ландшафт веб-разработки продолжает стремительно меняться. По данным последних исследований, TypeScript окончательно вытеснил JavaScript в крупных проектах, став стандартом де-факто для enterprise-разработки.\n\nReact сохраняет лидирующие позиции среди фреймворков, но с выходом Vue 4.0 в начале года конкуренция обострилась. Новая версия Vue предлагает улучшенную производительность и нативную интеграцию с TypeScript, что делает её привлекательным выбором для новых проектов.\n\nИнтересным трендом стало появление гибридных подходов к разработке. Всё больше команд используют комбинацию серверных компонентов React с клиентскими компонентами Vue для достижения оптимальной производительности и удобства разработки.\n\nНа стороне бэкенда Node.js с NestJS остаётся популярным выбором для TypeScript-проектов, но растёт интерес к Deno и Bun, особенно после выхода стабильных версий их фреймворков для веб-разработки.\n\nВ целом, 2025 год — это год консолидации технологий и фокуса на производительности и типобезопасности.",
    category: "news",
    tags: ["JavaScript", "TypeScript", "React", "Vue", "Node.js"]
  },
  {
    title: "LLM-революция в обучении программированию: результаты первого года",
    content: "В апреле 2025 года были опубликованы результаты масштабного исследования влияния больших языковых моделей (LLM) на образование в сфере программирования. Исследование, проведённое совместно несколькими ведущими техническими университетами, показало, что студенты, активно использующие LLM в процессе обучения, демонстрируют на 37% лучшие результаты в практических заданиях.\n\nОсобенно интересным оказался факт, что наибольшую пользу получают начинающие программисты. LLM помогают преодолеть начальный барьер входа в программирование, предоставляя контекстные объяснения и примеры кода, адаптированные под уровень студента.\n\nВ то же время, исследование выявило потенциальные проблемы: студенты, чрезмерно полагающиеся на AI-ассистентов, демонстрируют пробелы в фундаментальных знаниях алгоритмов и структур данных.\n\nВ ответ на эти вызовы, образовательные платформы начали внедрять специализированные LLM-ассистенты, которые не просто генерируют код, но и объясняют принципы работы алгоритмов, предлагают задачи для самостоятельного решения и постепенно уменьшают уровень подсказок по мере роста навыков студента.\n\nКак преподаватель программирования, я уже внедрил подобные практики в свои курсы и вижу значительное улучшение в понимании материала студентами.",
    category: "materials",
    tags: ["LLM", "AI", "Образование", "Программирование"]
  },
  {
    title: "GPT-4o и Gemini 1.5: Новое поколение AI для программистов",
    content: "В первом квартале 2025 года мы увидели выход двух мощных моделей искусственного интеллекта: GPT-4o от OpenAI и Gemini 1.5 от Google. Обе модели представляют собой значительный шаг вперёд в области AI-ассистентов для программистов.\n\nGPT-4o, где 'o' означает 'omni', отличается улучшенным пониманием контекста и способностью работать с различными типами данных. Модель демонстрирует впечатляющие результаты в задачах программирования, особенно в генерации и отладке кода.\n\nGemini 1.5, в свою очередь, предлагает расширенное контекстное окно до 2 миллионов токенов, что позволяет анализировать и работать с большими кодовыми базами целиком. Это особенно полезно при рефакторинге и оптимизации существующих проектов.\n\nОбе модели показывают значительный прогресс в понимании намерений разработчика и генерации кода, соответствующего лучшим практикам и стандартам. Особенно заметны улучшения в работе с TypeScript, где модели теперь способны генерировать сложные типовые конструкции и предлагать оптимальные решения для типизации.\n\nВ моей практике веб-разработки я активно использую обе модели: GPT-4o для генерации компонентов React и Gemini 1.5 для анализа и оптимизации существующего кода.",
    category: "news",
    tags: ["GPT-4o", "Gemini", "AI", "Программирование", "TypeScript"]
  },
  {
    title: "AI-база по программированию в 2025: Какие инструменты выбрать разработчику",
    content: "С развитием искусственного интеллекта в 2025 году разработчики получили доступ к широкому спектру AI-инструментов, оптимизированных под различные задачи программирования. Важно понимать, какие модели и инструменты лучше подходят для конкретных сценариев использования.\n\nДля генерации кода и парного программирования лидирующие позиции занимают GitHub Copilot (на базе GPT-4o) и DeepSeek Coder. Они особенно эффективны при работе с популярными языками и фреймворками, такими как TypeScript, React и Node.js.\n\nДля архитектурных задач и системного дизайна лучше подходят модели с расширенным контекстным окном и возможностями рассуждения (reasoning), такие как Gemini 1.5 Pro и Claude 3.5 Opus. Они способны анализировать сложные системы и предлагать оптимальные архитектурные решения.\n\nДля обучения и понимания кода отлично подходят специализированные образовательные модели, такие как Khan Academy AI и CodeTeacher, которые не просто генерируют код, но и объясняют принципы его работы.\n\nВажным трендом стала специализация моделей под конкретные языки и фреймворки. Например, TypeScript-GPT и React-Assistant предлагают глубокую экспертизу в своих областях, превосходя общие модели в специфических задачах.\n\nВ своей работе я использую комбинацию этих инструментов, выбирая оптимальный для каждой конкретной задачи.",
    category: "project-ideas",
    tags: ["AI", "Инструменты", "Программирование", "LLM", "Разработка"]
  }
];

// Функция для создания поста
async function createPost(postData) {
  try {
    // Создаем пост
    const postRef = db.collection('posts').doc();
    await postRef.set({
      title: postData.title,
      content: postData.content,
      category: postData.category,
      author_id: authorId,
      created_at: admin.firestore.Timestamp.now(),
      likesCount: 0,
      commentsCount: 0,
      viewsCount: 0
    });

    console.log(`Создан пост: ${postData.title} (ID: ${postRef.id})`);

    // Обрабатываем теги
    const batch = db.batch();

    for (const tagName of postData.tags) {
      // Проверяем, существует ли тег
      const tagsSnapshot = await db.collection('tags')
        .where('name', '==', tagName)
        .get();

      let tagId;

      if (tagsSnapshot.empty) {
        // Создаем новый тег
        const tagRef = db.collection('tags').doc();
        batch.set(tagRef, { name: tagName });
        tagId = tagRef.id;
        console.log(`Создан новый тег: ${tagName} (ID: ${tagId})`);
      } else {
        tagId = tagsSnapshot.docs[0].id;
        console.log(`Использован существующий тег: ${tagName} (ID: ${tagId})`);
      }

      // Создаем связь поста с тегом
      const postTagRef = db.collection('post_tags').doc();
      batch.set(postTagRef, {
        post_id: postRef.id,
        tag_id: tagId
      });
    }

    // Выполняем транзакцию
    await batch.commit();
    console.log(`Теги для поста ${postRef.id} успешно добавлены`);

    return postRef.id;
  } catch (error) {
    console.error("Ошибка при создании поста:", error);
    return null;
  }
}

// Функция для добавления всех мокап-новостей
async function addAllMockupNews() {
  console.log("Начинаем добавление мокап-новостей...");

  for (const news of mockupNews) {
    const postId = await createPost(news);
    if (postId) {
      console.log(`Успешно добавлена новость: ${news.title}`);
    } else {
      console.error(`Не удалось добавить новость: ${news.title}`);
    }
  }

  console.log("Добавление мокап-новостей завершено");
}

// Запускаем добавление новостей
addAllMockupNews();
