// Firestore Rules
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Профили пользователей
    match /profiles/{userId} {
      allow read: if true;
      allow create, update, delete: if request.auth != null && request.auth.uid == userId;
    }

    // Посты
    match /posts/{postId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null &&
                            (resource.data.author_id == request.auth.uid ||
                             get(/databases/$(database)/documents/profiles/$(request.auth.uid)).data.role in ["admin", "teacher"]);
    }

    // Теги
    match /tags/{tagId} {
      allow read: if true;
      allow write: if request.auth != null;
    }

    // Связи постов с тегами
    match /post_tags/{docId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null &&
                            (exists(/databases/$(database)/documents/posts/$(resource.data.post_id)) &&
                            (get(/databases/$(database)/documents/posts/$(resource.data.post_id)).data.author_id == request.auth.uid ||
                             get(/databases/$(database)/documents/profiles/$(request.auth.uid)).data.role in ["admin", "teacher"]));
    }

    // Комментарии
    match /comments/{commentId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null &&
                            (resource.data.author_id == request.auth.uid ||
                             get(/databases/$(database)/documents/profiles/$(request.auth.uid)).data.role in ["admin", "teacher"] ||
                             (exists(/databases/$(database)/documents/posts/$(resource.data.post_id)) &&
                              get(/databases/$(database)/documents/posts/$(resource.data.post_id)).data.author_id == request.auth.uid));
    }

    // Лайки
    match /likes/{likeId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update: if false;
      allow delete: if request.auth != null &&
                    (resource.data.user_id == request.auth.uid ||
                     get(/databases/$(database)/documents/profiles/$(request.auth.uid)).data.role in ["admin", "teacher"] ||
                     (exists(/databases/$(database)/documents/posts/$(resource.data.post_id)) &&
                      get(/databases/$(database)/documents/posts/$(resource.data.post_id)).data.author_id == request.auth.uid));
    }

    // Просмотры
    match /views/{viewId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update: if false;
      allow delete: if request.auth != null &&
                    (get(/databases/$(database)/documents/profiles/$(request.auth.uid)).data.role in ["admin", "teacher"] ||
                     (exists(/databases/$(database)/documents/posts/$(resource.data.post_id)) &&
                      get(/databases/$(database)/documents/posts/$(resource.data.post_id)).data.author_id == request.auth.uid));
    }

    // Лайки комментариев
    match /comment_likes/{likeId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update: if false;
      allow delete: if request.auth != null &&
                    (resource.data.user_id == request.auth.uid ||
                     get(/databases/$(database)/documents/profiles/$(request.auth.uid)).data.role in ["admin", "teacher"] ||
                     (exists(/databases/$(database)/documents/comments/$(resource.data.comment_id)) &&
                      get(/databases/$(database)/documents/comments/$(resource.data.comment_id)).data.author_id == request.auth.uid));
    }
  }
}

// Storage Rules
rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    match /posts/{userId}/{fileName} {
      allow read: if true;
      allow write: if request.auth != null && request.auth.uid == userId;
    }

    match /avatars/{userId}/{fileName} {
      allow read: if true;
      allow write: if request.auth != null && request.auth.uid == userId;
    }
  }
}
